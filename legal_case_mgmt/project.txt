# Legal Case Management System

## Technical Specification

### System Requirements
- SQLite3 database engine must be installed on the system
- Python packages as specified in backend/requirements.txt

### Frontend Agent Chat
- Uses Pydantic AI framework with OpenRouter API
- Supports three main operations:
  1. get_case_info: Retrieves details for a specific case by making an API call to `http://172.17.0.2:8000/api/v1/cases/{case_id}`
  2. list_all_cases: Retrieves a list of all cases by making an API call to `http://172.17.0.2:8000/api/v1/cases`
  3. get_case_documents: Retrieves and displays documents for a case by making an API call to `http://172.17.0.2:8000/api/v1/documents/{case_id}`
- Error handling for API responses
- Interactive command interface:
  - Accepts case ID for specific case lookup
  - Accepts "list all cases" command for full case listing

## Functional Requirements

### Case Information Assistant
- Must retrieve and display case details when provided with a case ID
- Must retrieve and display a list of all cases when requested
- Must retrieve and display case documents when requested
- Must handle API errors gracefully and inform the user
- Must present information in a clear, organized manner
- Must focus on key details: case number, title, status, and type
- Must politely inform user if case or documents are not found
- Must allow users to select specific documents to view from a list
- Must display document metadata and content in an organized format

1. System Overview
   - Purpose: Manage legal cases, documents, and related entities
   - Scope: Case tracking, document management, client management

2. Core Components
   - Models:
     * Case: Represents a legal case with attributes (case number, parties, status)
     * Client: Represents a client with attributes (name, contact info)
     * Document: Represents legal documents with attributes (type, content, case reference)

   - API:
     * RESTful API endpoints for CRUD operations
     * Version: v1
     * Endpoints: /cases, /clients, /documents

   - Database:
     * Alembic migrations for schema management
     * Tables: cases, clients, documents

3. Document Management Features
   - Document Types:
     * Case Briefs
     * Legal Contracts
     * Court Filings
   - Storage: documents directory with individual files
   - Operations: Create, Read, Update, Delete

4. Technical Stack
   - Backend: Python
   - Framework: FastAPI
   - Database: PostgreSQL
   - Version Control: Alembic
   - Server Configuration:
     * Host: 0.0.0.0 (accessible from any network interface)
     * Port: 8000
     * Development mode with auto-reload enabled

5. Testing
   - Test Plan: testplan.md
   - Test Documents: documents/test_document.txt, documents/test_document2.txt

6. Current State
   - Core models implemented (case.py, client.py, document.py)
   - API endpoints defined (api.py, endpoints/documents.py)
   - CRUD operations implemented (crud/document.py)
   - Document utilities implemented (file.py)
   - Schema definitions implemented (schemas/document.py)
   - Sample documents created:
     * documents/case_brief_1.txt
     * documents/legal_contract_1.txt
     * documents/court_filing_1.txt